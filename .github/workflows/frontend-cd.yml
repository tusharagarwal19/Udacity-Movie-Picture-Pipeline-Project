name: Frontend Continuous Deployment

on:
  push:
    branches:
      - main
      
  workflow_dispatch:

env:
  AWS_REGION: us-east-1

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: starter/frontend
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: latest

      - name: Cache NPM Dependencies
        id: caching-data
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install NPM Dependencies
        run: npm install

      - name: Run Linting
        run: npm run lint
        continue-on-error: false

  test:
    name: Test
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: starter/frontend
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: latest

      - name: Cache NPM Dependencies
        id: caching-data
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install NPM Dependencies
        run: npm install

      - name: Run Tests
        run: npm run test
        continue-on-error: false

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [lint, test]
    defaults:
      run:
        working-directory: starter/frontend
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }} 
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }} 
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and Push Image to AWS ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: frontend
          IMAGE_TAG: ${{ github.sha }}
          REACT_APP_MOVIE_API_URL: ${{ vars.REACT_APP_MOVIE_API_URL }}
        run: |
          echo Building Docker image for frontend...
          docker build --build-arg=REACT_APP_MOVIE_API_URL="http://$REACT_APP_MOVIE_API_URL" -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
          echo Pushing the frontend Docker image to ECR repo...
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG

      - name: Setup Auth for EKS Cluster
        run: |
          aws eks update-kubeconfig --name cluster --region ${{ env.AWS_REGION }}
          kubectl get svc
          kubectl config view

      - name: Run Initialization Script
        run: |
          chmod +x init.sh 
          ./init.sh || true
          kubectl config view
        working-directory: setup

      - name: Deploy to Cluster
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          cd k8s
          kustomize edit set image frontend=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/frontend:latest
          kustomize build | kubectl apply -f -
          kubectl get svc -A
